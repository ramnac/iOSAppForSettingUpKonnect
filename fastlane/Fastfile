# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  before_all do
    sh("env")
    setup_jenkins(
      force:true
    )
    removeUnwantedFoldersAndItsContents
  end

  desc "Push a new beta build to TestFlight"
  lane :beta do
    validate_params(
      certsAndProfilesGitUsername:ENV["CERTS_AND_PROFILES_GIT_USERNAME"],
      certsAndProfilesGitUrl:ENV["CERTS_AND_PROFILES_GIT_URL"],
      matchPassword:ENV["MATCH_PASSWORD"],
      xcodeAppInfoPlistPath:ENV["XCODE_APP_INFO_PLIST_PATH"],
      xcodeAppVersionKey:ENV["XCODE_APP_VERSION_KEY"],
      xcodeVersionNumber:ENV["XCODE_VERSION_NUMBER"],
      xcodeScheme:ENV["XCODE_SCHEME"],
      codeSigningIdentity:ENV["CODE_SIGNING_IDENTITY"],
      profileType:ENV["PROFILE_TYPE"],
      xcodeExportMethod:ENV["XCODE_EXPORT_METHOD"]
    )

  	xcversion(version: ENV["XCODE_VERSION_NUMBER"])

    checkCertsAndProfiles(
      type:ENV["PROFILE_TYPE"],
      gitUrl:ENV["CERTS_AND_PROFILES_GIT_URL"],
      teamId:CredentialsManager::AppfileConfig.try_fetch_value(:team_id),
      outputPath:"fastlane/match"
    )

    current_version = get_info_plist_value(
      path: ENV["XCODE_APP_INFO_PLIST_PATH"],
      key: ENV["XCODE_APP_VERSION_KEY"]
    )
    UI.success("Current Version of the App : #{current_version}")

    increment_build_number({
      build_number: latest_testflight_build_number(version:current_version,initial_build_number: "0") + 1
    })

    gym(
      clean: true,
      scheme: ENV["XCODE_SCHEME"],
      include_symbols: true,
      include_bitcode: true,
      codesigning_identity: ENV["CODE_SIGNING_IDENTITY"],
      export_method: ENV["XCODE_EXPORT_METHOD"]
    )
    
    deliver(
      price_tier: 0,
      force: true
    )
  end

  lane :addDevice do 
    UI.user_error!("Please provide DEVICE_NAME") if ENV["DEVICE_NAME"].to_s.length == 0
    UI.user_error!("Please provide DEVICE_IDENTIFIER") if ENV["DEVICE_IDENTIFIER"].to_s.length == 0
    register_devices(
      devices: {
        ENV["DEVICE_NAME"] => ENV["DEVICE_IDENTIFIER"]
      }
    ) 
  end

  lane :frameScreenshots do |options|
    frameit(path:"./fastlane/screenshots/")

    Dir.glob("./screenshots/*framed.png") {|file|
      originalFileName = file.sub('_framed','')
      imageHeight=`sips -g pixelHeight "#{originalFileName}" | grep 'pixelHeight' | cut -d: -f2`
      imageWidth=`sips -g pixelWidth "#{originalFileName}" | grep 'pixelWidth' | cut -d: -f2`
      #requires imagemagick
      sh("convert","-resize","#{imageWidth}x#{imageHeight}","#{file}","-background","white","-gravity","center","-extent","#{imageWidth}x#{imageHeight}","#{file}")
    }
  end

  lane :generateDevCertAndDevProfile do
    checkCertsAndProfiles(
      type:"development",
      gitUrl:ENV["CERTS_AND_PROFILES_GIT_URL"],
      teamId:CredentialsManager::AppfileConfig.try_fetch_value(:team_id),
      outputPath:"fastlane/match",
      force_for_new_devices: true
    )
  end

  private_lane :validate_params do |options|
    UI.user_error!("Please provide CERTS_AND_PROFILES_GIT_USERNAME") if options[:certsAndProfilesGitUsername].to_s.length == 0
    UI.user_error!("Please provide CERTS_AND_PROFILES_GIT_URL") if options[:certsAndProfilesGitUrl].to_s.length == 0
    UI.user_error!("Please provide MATCH_PASSWORD") if options[:matchPassword].to_s.length == 0
    UI.user_error!("Please provide a XCODE_APP_INFO_PLIST_PATH") if options[:xcodeAppInfoPlistPath].to_s.length == 0
    UI.user_error!("Please provide a XCODE_APP_VERSION_KEY") if options[:xcodeAppVersionKey].to_s.length == 0
    UI.user_error!("Please provide a XCODE_VERSION_NUMBER") if options[:xcodeVersionNumber].to_s.length == 0
    UI.user_error!("Please provide a XCODE_SCHEME") if options[:xcodeScheme].to_s.length == 0
    UI.user_error!("Please provide a CODE_SIGNING_IDENTITY") if options[:codeSigningIdentity].to_s.length == 0
    UI.user_error!("Please provide a PROFILE_TYPE") if options[:profileType].to_s.length == 0
    UI.user_error!("Please provide a XCODE_EXPORT_METHOD") if options[:xcodeExportMethod].to_s.length == 0
  end

  private_lane :checkCertsAndProfiles do |options|
    match(
      type: options[:type],
      git_url: options[:gitUrl],
      git_branch: options[:teamId],
      verbose: false,
      output_path: options[:outputPath]
    )
  end

  private_lane :removeUnwantedFoldersAndItsContents do |options|
    FileUtils.rm_rf("../derivedData")
    FileUtils.rm_rf("../output")
    FileUtils.rm_rf("./match")
  end

  after_all do
    removeUnwantedFoldersAndItsContents
  end

  error do |lane, exception, options|
    removeUnwantedFoldersAndItsContents
  end
end
